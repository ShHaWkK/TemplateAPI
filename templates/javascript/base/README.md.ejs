# <%- projectName %>

GÃ©nÃ©rÃ© avec **create-template-api** le <%- createdAt %>.

## ğŸš€ Modules inclus

- Express configurÃ© avec Helmet, CORS, rate limiting et logging Pino.
- Validation des entrÃ©es via Zod et gestion centralisÃ©e des erreurs.
- Documentation OpenAPI servie sur `/docs` et collection Insomnia.
<% if (featureSummaries.length) { %>
<% featureSummaries.forEach((summary) => { %>- <%- summary %>
<% }); %>
<% } %>

## ğŸ—‚ Architecture hexagonale

```
src/
â”œâ”€â”€ domain/           # ModÃ¨le mÃ©tier et contrats
â”œâ”€â”€ application/      # Cas d'usage, services, erreurs
â”œâ”€â”€ infrastructure/   # Adaptateurs techniques & conteneur
â””â”€â”€ interface/http/   # Routes, contrÃ´leurs, middlewares, docs
```

## ğŸ”§ Installation & exÃ©cution

```bash
<%- packageManagerCommands.install %>
<%- packageManagerCommands.run %> dev
```

### Scripts utiles

| Script | Commande |
| ------ | -------- |
<% Object.entries(scripts).forEach(([name, command]) => { %>| <%- name %> | `<%- command %>` |
<% }); %>

## ğŸ“š Documentation

- Swagger/OpenAPI sur [`/docs`](http://localhost:3333/docs)
- Collection Insomnia : `docs/insomnia/collection.json`

## ğŸ§ª Tests

```bash
<%- packageManagerCommands.run %> test
```

## ğŸ›¡ Bonnes pratiques

- Middleware de sÃ©curitÃ© activÃ©s par dÃ©faut
- Logs structurÃ©s via Pino + Pino-pretty en dÃ©veloppement
- Validation d'entrÃ©e systÃ©matique et rÃ©ponses d'erreur homogÃ¨nes
<% if (features.includes('auth')) { %>- Authentification JWT + rotation de refresh token
<% } %>

Bon dÃ©veloppement ! ğŸš€
