import { ConflictError } from '../../errors/conflict-error';
import { UserRepository } from '../../../domain/repositories/user-repository';
import { createUser, UserRole } from '../../../domain/entities/user';
import { PasswordHasher } from '../../services/password-hasher';
import { TokenService, TokenPair } from '../../services/token-service';

interface RegisterUserRequest {
  name: string;
  email: string;
  password: string;
  role?: UserRole;
}

interface RegisterUserResponse {
  user: ReturnType<typeof createUser>;
  tokens: TokenPair;
}

export class RegisterUserUseCase {
  constructor(
    private readonly userRepository: UserRepository,
    private readonly passwordHasher: PasswordHasher,
    private readonly tokenService: TokenService
  ) {}

  async execute({ name, email, password, role = 'client' }: RegisterUserRequest): Promise<RegisterUserResponse> {
    const existingUser = await this.userRepository.findByEmail(email);

    if (existingUser) {
      throw new ConflictError('Email already registered');
    }

    const passwordHash = await this.passwordHasher.hash(password);
    const user = createUser({ name, email, passwordHash, role });

    await this.userRepository.create(user);
    const tokens = await this.tokenService.issueTokens(user);

    return { user, tokens };
  }
}
