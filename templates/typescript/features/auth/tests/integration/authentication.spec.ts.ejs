import request from 'supertest';
import { buildTestApp } from '../../utils/test-app';

describe('Authentication flows', () => {
  it('registers a new user and returns tokens', async () => {
    const app = buildTestApp();

    const response = await request(app).post('/auth/register').send({
      name: 'Test User',
      email: 'test@example.com',
      password: 'Password#123',
    });

    expect(response.status).toBe(201);
    expect(response.body.tokens).toEqual(
      expect.objectContaining({ accessToken: expect.any(String), refreshToken: expect.any(String) })
    );
  });

  it('authenticates an existing user and returns profile data', async () => {
    const app = buildTestApp();

    const loginResponse = await request(app).post('/auth/login').send({
      email: 'admin@example.com',
      password: 'Admin#1234',
    });

    expect(loginResponse.status).toBe(200);
    const { accessToken, refreshToken } = loginResponse.body.tokens;

    const profileResponse = await request(app)
      .get('/me')
      .set('Authorization', `Bearer ${accessToken}`);

    expect(profileResponse.status).toBe(200);
    expect(profileResponse.body).toMatchObject({ email: 'admin@example.com', role: 'admin' });

    const refreshResponse = await request(app).post('/auth/refresh').send({ refreshToken });
    expect(refreshResponse.status).toBe(200);
    expect(refreshResponse.body).toEqual(
      expect.objectContaining({ accessToken: expect.any(String), refreshToken: expect.any(String) })
    );
  });
});
