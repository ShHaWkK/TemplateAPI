# <%- projectName %>

Généré avec **create-template-api** le <%- createdAt %>.

## 🚀 Modules inclus

- Sécurité HTTP (Helmet, CORS, rate limiting) et logging Pino.
- Validation des entrées avec Zod et middleware de gestion d'erreurs.
- Documentation OpenAPI servie sur `/docs` et collection Insomnia.
- Endpoint de diagnostic `/status` détaillant l'état de l'API et des fonctionnalités actives.
<% if (featureSummaries.length) { %>
<% featureSummaries.forEach((summary) => { %>- <%- summary %>
<% }); %>
<% } %>

<% if (dataProviderSummaries.length) { %>
## 🗄️ Persistance & stockage préparés

<% dataProviderSummaries.forEach((summary) => { %>- <%- summary %>
<% }); %>
<% } else { %>
## 🗄️ Persistance & stockage

- Aucune intégration de base de données ou de stockage n'a été sélectionnée. Branchez vos adapters dans `src/infrastructure`.
<% } %>

## 🗂 Architecture hexagonale

```
src/
├── domain/           # Modèle métier et contrats
├── application/      # Cas d'usage, services et erreurs
├── infrastructure/   # Adapters, configuration et conteneur d'injection
└── interface/http/   # Routes, contrôleurs, middlewares, docs et DTOs
```

Chaque couche ne dépend que de la précédente afin de garantir testabilité et évolutivité.

## 🔧 Installation & exécution

```bash
<%- packageManagerCommands.install %>
<%- packageManagerCommands.run %> dev
```

### Vérification rapide

```bash
curl http://localhost:3333/status
```

Vous obtenez un instantané JSON avec l'état global, les fonctionnalités activées, les dépendances simulées
et les liens utiles. Pour un simple ping, `GET /health` reste disponible.

<% const apiStatusCommand = packageManager === 'npm' ? 'npm run api -- --status' : packageManager === 'pnpm' ? 'pnpm api --status' : 'yarn api --status'; %>

### Diagnostic assisté en CLI

```bash
<%- apiStatusCommand %>
```

Ce script lance automatiquement `GET /health` et `GET /status`, vérifie les fonctionnalités choisies ainsi que les options
de persistance déclarées et vous alerte si une dépendance critique est en erreur. Un résumé lisible présente les modules
actifs, l'état des stockages configurés et les diagnostics agrégés.
<% if (features.includes('auth')) { %>

### Scénario d'authentification prêt à l'emploi

Deux comptes de démonstration sont préchargés :

| Email | Mot de passe | Rôle |
| ----- | ------------ | ---- |
| `admin@example.com` | `Admin#1234` | admin |
| `client@example.com` | `Client#1234` | client |

Inscrivez un utilisateur, connectez-vous et rafraîchissez votre token sans écrire de code :

```bash
# Inscription
curl -X POST http://localhost:3333/auth/register \
  -H "Content-Type: application/json" \
  -d '{"name":"Ada","email":"ada@example.com","password":"Str0ng#Pass"}'

# Connexion administrateur (nécessite jq pour extraire le token)
ACCESS_TOKEN=$(curl -s -X POST http://localhost:3333/auth/login \
  -H "Content-Type: application/json" \
  -d '{"email":"admin@example.com","password":"Admin#1234"}' | jq -r '.tokens.accessToken')

# Profil courant
curl -H "Authorization: Bearer ${ACCESS_TOKEN}" http://localhost:3333/me
```
<% } %>

### Principaux scripts

| Script | Commande |
| ------ | -------- |
<% Object.entries(scripts).forEach(([name, command]) => { %>| <%- name %> | `<%- command %>` |
<% }); %>

## 📚 Documentation

- Swagger/OpenAPI disponible sur [`/docs`](http://localhost:3333/docs).
- Collection Insomnia générée dans `docs/insomnia/collection.json`.
- Aperçu temps réel sur [`/status`](http://localhost:3333/status).

## 🧪 Tests

```bash
<%- packageManagerCommands.run %> test
```

Les tests reposent sur Jest et Supertest. Des doubles in-memory permettent d'isoler les cas d'usage des dépendances.
Chaque fonctionnalité activée dispose de scénarios de bout en bout : flux d'authentification, gestion complète des
utilisateurs (création, consultation, mise à jour, suppression) et espaces client / admin lorsqu'ils sont sélectionnés.

## 🛡 Sécurité & bonnes pratiques

- Middleware globaux : Helmet, CORS configurables, rate limiting.
- Journalisation structurée via Pino (pretty logging en développement).
- Validation centralisée avec Zod et réponses d'erreur normalisées.
<% if (features.includes('auth')) { %>- Tokens JWT signés, rotation de refresh token et hashage des mots de passe.
<% } %>
<% if (features.includes('clientPortal') || features.includes('adminPortal')) { %>- Contrôle d'accès basé sur les rôles pour les espaces dédiés.
<% } %>

## ▶️ Aller plus loin

- Ajoutez de nouveaux cas d'usage dans `src/application/use-cases`.
- Implémentez vos propres adaptateurs (email, files, etc.) dans `src/infrastructure`.
- Étendez la documentation via `src/interface/http/docs/openapi.ts`.

Bon développement ! 🚀
