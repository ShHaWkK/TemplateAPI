<% if (hasPrisma) { %>
import { PrismaClient, User as PrismaUser } from '@prisma/client';
import { User } from '../../../domain/entities/user';
import { UserRepository } from '../../../domain/repositories/user-repository';

function mapUser(record: PrismaUser): User {
  return {
    id: record.id,
    name: record.name,
    email: record.email,
    passwordHash: record.passwordHash,
    role: record.role as User['role'],
    createdAt: record.createdAt,
    updatedAt: record.updatedAt,
  };
}

export class PrismaUserRepository implements UserRepository {
  constructor(private readonly prisma: PrismaClient) {}

  async create(user: User): Promise<User> {
    const created = await this.prisma.user.create({
      data: {
        id: user.id,
        name: user.name,
        email: user.email.toLowerCase(),
        passwordHash: user.passwordHash,
        role: user.role,
        createdAt: user.createdAt,
        updatedAt: user.updatedAt,
      },
    });

    return mapUser(created);
  }

  async update(user: User): Promise<User> {
    const updated = await this.prisma.user.update({
      where: { id: user.id },
      data: {
        name: user.name,
        email: user.email.toLowerCase(),
        passwordHash: user.passwordHash,
        role: user.role,
      },
    });

    return mapUser(updated);
  }

  async delete(userId: string): Promise<void> {
    await this.prisma.user.delete({ where: { id: userId } });
  }

  async findById(userId: string): Promise<User | null> {
    const record = await this.prisma.user.findUnique({ where: { id: userId } });
    return record ? mapUser(record) : null;
  }

  async findByEmail(email: string): Promise<User | null> {
    const record = await this.prisma.user.findUnique({ where: { email: email.toLowerCase() } });
    return record ? mapUser(record) : null;
  }

  async list(): Promise<User[]> {
    const records = await this.prisma.user.findMany({ orderBy: { createdAt: 'asc' } });
    return records.map(mapUser);
  }
}
<% } %>
