<% if (features.includes('auth')) { %>
import { NextFunction, Request, Response } from 'express';
import { AuthenticationError } from '../../../application/errors/authentication-error';
import { resolveTokenService, resolveUserRepository } from '../../../infrastructure/container';

export async function ensureAuthenticated(request: Request, _response: Response, next: NextFunction) {
  try {
    const authorization = request.headers.authorization;

    if (!authorization) {
      throw new AuthenticationError('Authorization header missing');
    }

    const [, token] = authorization.split(' ');

    if (!token) {
      throw new AuthenticationError('Invalid authorization header');
    }

    const payload = resolveTokenService().verifyAccessToken(token);
    const user = await resolveUserRepository().findById(payload.sub);

    if (!user) {
      throw new AuthenticationError('User not found');
    }

    request.user = { id: user.id, role: user.role };

    return next();
  } catch (error) {
    return next(error);
  }
}
<% } %>
