<% if (features.includes('auth')) { %>
import { AuthenticationError } from '../../errors/authentication-error';
import { UserRepository } from '../../../domain/repositories/user-repository';
import { PasswordHasher } from '../../services/password-hasher';
import { TokenPair, TokenService } from '../../services/token-service';
import { User } from '../../../domain/entities/user';

interface AuthenticateUserRequest {
  email: string;
  password: string;
}

interface AuthenticateUserResponse {
  user: User;
  tokens: TokenPair;
}

export class AuthenticateUserUseCase {
  constructor(
    private readonly userRepository: UserRepository,
    private readonly passwordHasher: PasswordHasher,
    private readonly tokenService: TokenService
  ) {}

  async execute({ email, password }: AuthenticateUserRequest): Promise<AuthenticateUserResponse> {
    const user = await this.userRepository.findByEmail(email);

    if (!user) {
      throw new AuthenticationError();
    }

    const passwordMatches = await this.passwordHasher.compare(password, user.passwordHash);

    if (!passwordMatches) {
      throw new AuthenticationError();
    }

    const tokens = await this.tokenService.issueTokens(user);

    return { user, tokens };
  }
}
<% } %>
